blueprint:
  name: Hue tap dial switch
  description: Control multiple lights with Hue tap dial switches
  source_url: https://github.com/GordonFreemanK/ha-blueprints/blob/main/hue_tap_dial_switch.yaml
  domain: automation
  input:
    switches:
      name: Switches
      description: The switches that toggle the lights
      selector:
        device:
          filter:
          - model: Hue Tap dial switch (8719514440937/8719514440999)
          multiple: true
    button_1_lights:
      name: Button 1 lights
      description: The lights to toggle with Button 1
      selector:
        entity:
          domain: light
          multiple: true
    button_2_lights:
      name: Button 2 lights
      description: The lights to toggle with Button 2
      selector:
        entity:
          domain: light
          multiple: true
      default: []
    button_3_lights:
      name: Button 3 lights
      description: The lights to toggle with Button 3
      selector:
        entity:
          domain: light
          multiple: true
      default: []
    button_4_lights:
      name: Button 4 lights
      description: The lights to toggle with Button 4
      selector:
        entity:
          domain: light
          multiple: true
      default: []
    brightness:
      name: Brightness
      description: The brightness to turn on the lights at
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: '%'
      default: 80
mode: restart
max_exceeded: silent

trigger:
- platform: mqtt
  topic: zigbee2mqtt/+/action

variables:
  device_name: "{{ trigger.topic | regex_replace('zigbee2mqtt/(.+)/action','\\g<1>') }}"
  payload: "{{ trigger.payload }}"
  switches: !input switches
  button_1_lights: !input button_1_lights
  button_2_lights: !input button_2_lights
  button_3_lights: !input button_3_lights
  button_4_lights: !input button_4_lights

condition:
- condition: template
  value_template: "{{ device_name in switches | map('device_attr','name') }}"
- condition: template
  value_template: "{{ payload in ['button_1_press_release','button_2_press_release','button_3_press_release','button_4_press_release','brightness_step_up','brightness_step_down'] }}"

action:
- choose:
  - conditions: "{{ payload in ['button_1_press_release','button_2_press_release','button_3_press_release','button_4_press_release'] }}"
    sequence:
    - variables:
        lights: >
          {% if payload == 'button_1_press_release' %}
            {{ button_1_lights }}
          {% elif payload == 'button_2_press_release' %}
            {{ button_2_lights }}
          {% elif payload == 'button_3_press_release' %}
            {{ button_3_lights }}
          {% elif payload == 'button_4_press_release' %}
            {{ button_4_lights }}
          {% endif %}
        state: "{{ expand(lights) | selectattr('state','eq','on') | list | length > 0 }}"
    - if:
      - condition: template
        value_template: "{{ state }}"
      then:
      - service: light.turn_off
        target:
          entity_id: "{{ lights }}"
        data:
          transition: 0
      else:
      - service: light.turn_on
        target:
          entity_id: "{{ lights }}"
        data:
          transition: 0
          brightness_pct: !input brightness
    - repeat:
        for_each: "{{ lights }}"
        sequence:
        - event: light_toggled
          event_data:
            state: "{{ not state }}"
            entity_id: "{{ repeat.item }}"
  - conditions: "{{ payload == 'brightness_step_up' }}"
    sequence:
    - variables:
        lights: >
          {% set lights_all = expand([button_1_lights, button_2_lights, button_3_lights, button_4_lights]) %}
          {% set lights_on = lights_all | selectattr('state','eq','on') | list %}
          {% set lights_used = lights_on if lights_on | length > 0 else lights_all %}
          {{ lights_used | map(attribute='entity_id') | unique | list }}
    - service: light.turn_on
      target:
        entity_id: "{{ lights }}"
      data:
        transition: 1
        brightness_step: 32
  - conditions: "{{ payload == 'brightness_step_down' }}"
    sequence:
    - variables:
        lights: >
          {{ expand([button_1_lights, button_2_lights, button_3_lights, button_4_lights])
            | selectattr('state','eq','on')
            | map(attribute='entity_id')
            | unique
            | list }}
    - service: light.turn_on
      target:
        entity_id: "{{ lights }}"
      data:
        transition: 1
        brightness_step: -32
