blueprint:
  name: Hue button with scenes
  description: Toggle lights and activate scenes with Hue buttons
  source_url: https://github.com/GordonFreemanK/ha-blueprints/blob/main/hue_button_scenes.yaml
  domain: automation
  input:
    buttons:
      name: Buttons
      description: The buttons that toggle the lights
      selector:
        device:
          filter:
          - model: Hue smart button (8718699693985)
          multiple: true
    scenes:
      name: Scenes
      description: The scenes to cycle with the buttons
      selector:
        entity:
          domain: scene
          multiple: true
    scene_input:
      name: Scene input
      description: The input in which to store the current scene
      selector:
        entity:
          domain: input_text
mode: restart
max_exceeded: silent

trigger:
- platform: mqtt
  topic: zigbee2mqtt/+/action

variables:
  device_name: "{{ trigger.topic | regex_replace('zigbee2mqtt/(.+)/action','\\g<1>') }}"
  payload: "{{ trigger.payload }}"
  buttons: !input buttons
  scenes: !input scenes
  scene_input: !input scene_input
  lights: >
    {% set scene_entities = expand(scenes) | map(attribute='attributes.entity_id') %}
    {{ expand(scene_entities) | map(attribute='entity_id') | list }}

condition:
- condition: template
  value_template: "{{ device_name in buttons | map('device_attr','name') }}"
- condition: template
  value_template: "{{ payload in ['on','off','brightness_step_up','brightness_step_down'] }}"

action:
- variables:
    lights_on: "{{ expand(lights) | selectattr('state','eq','on') | map(attribute='entity_id') | list }}"
- choose:
  # on or off means short press: we cycle the scene
  - conditions: "{{ payload in ['on','off'] }}"
    sequence:
    - variables:
        scene: >
          {% set ns = namespace(index=0) %}
          {% set scene = states(scene_input) %}
          {% if (lights_on | length > 0) and (scene in scenes) %}
            {% set ns.index = (scenes.index(scene) + 1) % (scenes | length) %}
          {% endif %}
          {{ scenes[ns.index] }}
    - service: scene.turn_on
      target:
        entity_id: "{{ scene }}"
      data:
        transition: 1
    - service: input_text.set_value
      data:
        value: "{{ scene }}"
      target:
        entity_id: !input scene_input
  # step up or step down mean long press: we switch the lights off
  - conditions: "{{ payload in ['brightness_step_up','brightness_step_down'] }}"
    sequence:
    - service: light.turn_off
      target:
        entity_id: "{{ lights }}"
      data:
        transition: 1
    - service: input_text.set_value
      data:
        value: ''
      target:
        entity_id: !input scene_input
