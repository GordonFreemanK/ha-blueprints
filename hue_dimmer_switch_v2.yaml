blueprint:
  name: Hue dimmer switch v2
  description: Toggle lights with Hue dimmer switches
  source_url: https://github.com/GordonFreemanK/ha-blueprints/blob/main/hue_dimmer_switch_v2.yaml
  domain: automation
  input:
    switches:
      name: Switches
      description: The switches that toggle the lights
      selector:
        device:
          integration: zha
          manufacturer: Signify Netherlands B.V.
          model: RWL022
          multiple: true
    lights:
      name: Lights
      description: The lights to toggle with the switches
      selector:
        entity:
          domain: light
          multiple: true
    brightness:
      name: Brightness
      description: The brightness to turn on the lights at
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: '%'
      default: 80
mode: restart
max_exceeded: silent

trigger:
- platform: event
  event_type: zha_event

variables:
  device_id: "{{ trigger.event.data.device_id }}"
  command: "{{ trigger.event.data.command }}"
  switches: !input switches
  lights: !input lights

condition:
- condition: template
  value_template: "{{ device_id in switches }}"
- condition: template
  value_template: "{{ command in ['on_short_release','step'] }}"

action:
- variables:
    lights_on: "{{ expand(lights) | selectattr('state','eq','on') | map(attribute='entity_id') | list }}"
- choose:
  - conditions: "{{ command == 'on_short_release' }}"
    sequence:
    - variables:
        state: "{{ lights_on | length > 0 }}"
    - if:
      - condition: template
        value_template: "{{ state }}"
      then:
      - service: light.turn_off
        target:
          entity_id: "{{ lights }}"
      else:
        - service: light.turn_on
          target:
            entity_id: "{{ lights }}"
          data:
            brightness_pct: !input brightness
    - repeat:
        for_each: "{{ lights }}"
        sequence:
        - event: light_toggled
          event_data:
            state: "{{ not state }}"
            entity_id: "{{ repeat.item }}"
  - conditions: "{{ command == 'step' }}"
    sequence:
    - variables:
        step_mode: "{{ trigger.event.data.params.step_mode }}"
        step_size: "{{ trigger.event.data.params.step_size }}"
    - if:
      - condition: template
        value_template: "{{ step_mode == 'StepMode.Up' }}"
      then:
      - service: light.turn_on
        target:
          entity_id: "{{ lights_on }}"
        data:
          brightness_step: "{{ step_size }}"
          transition: 1
      else:
      - service: light.turn_on
        target:
          entity_id: "{{ lights }}"
        data:
          brightness_step: "{{ -step_size }}"
          transition: 1
